{
    "defer": "defer" {
        "promise": "Promise" {
            "promiseDispatch": [Function],
            "valueOf": [Function],
            "inspect": [Function]
        },
        "resolve": [Function],
        "fulfill": [Function],
        "reject": [Function],
        "notify": [Function]
    },
    "promise": Promise {
        promiseDispatch: [Function],
        valueOf: [Function],
        inspect: [Function]
    },
    lastPromise: Promise {
        promiseDispatch: [Function],
        valueOf: [Function],
        inspect: [Function]
    },
    desiredCapabilities: {
        javascriptEnabled: true,
        locationContextEnabled: true,
        handlesAlerts: true,
        rotatable: true,
        browserName: 'electron',
        chromeOptions: {
            binary: '/Users/al/Global/BFIELDY/integrated-spreadsheet-environment/node_modules/spectron/lib/launcher.js',
            args: [Array],
            debuggerAddress: undefined,
            windowTypes: [Array]
        },
        loggingPrefs: {
            browser: 'ALL',
            driver: 'ALL'
        }
    },
    requestHandler: RequestHandler {
        sessionID: '9b1302d34f8cce90f9b8901fc3d182cb',
        startPath: '/wd/hub',
        gridApiStartPath: '/grid/api',
        eventHandler: EventEmitter {
            _events: [Object: null prototype],
            _eventsCount: 5,
            _maxListeners: undefined
        },
        logger: Logger {
            logLevel: 'verbose',
            writeStream: [DevNull]
        },
        defaultOptions: {
            port: 9515,
            waitforTimeout: 5000,
            waitforInterval: 500,
            coloredLogs: true,
            deprecationWarnings: true,
            logLevel: 'silent',
            baseUrl: null,
            onError: [],
            connectionRetryTimeout: 30000,
            connectionRetryCount: 10,
            desiredCapabilities: [Object],
            logOutput: [DevNull],
            hostname: '127.0.0.1',
            protocol: 'http'
        }
    },
    logger: Logger {
        logLevel: 'verbose',
        writeStream: DevNull {
            _writableState: [WritableState],
            writable: true,
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined
        }
    },
    options: {
        port: 9515,
        waitforTimeout: 5000,
        waitforInterval: 500,
        coloredLogs: true,
        deprecationWarnings: true,
        logLevel: 'silent',
        baseUrl: null,
        onError: [],
        connectionRetryTimeout: 30000,
        connectionRetryCount: 10,
        desiredCapabilities: {
            browserName: 'electron',
            chromeOptions: [Object]
        },
        logOutput: DevNull {
            _writableState: [WritableState],
            writable: true,
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined
        },
        hostname: '127.0.0.1',
        protocol: 'http'
    },
    commandList: [{
            name: 'init',
            args: [],
            timestamp: 1583360087341,
            result: [Object]
        },
        {
            name: 'execute',
            args: [Array],
            timestamp: 1583360087911,
            result: true
        },
        {
            name: 'execute',
            args: [Array],
            timestamp: 1583360087989,
            result: '7.1.2'
        },
        {
            name: 'execute',
            args: [Array],
            timestamp: 1583360088005,
            result: undefined
        },
        {
            name: 'timeouts',
            args: [Array],
            timestamp: 1583360088219,
            result: [Object]
        },
        {
            name: 'waitUntilTextExists',
            args: [Array],
            timestamp: 1583360088223
        },
        {
            name: 'waitUntil',
            args: [Array],
            timestamp: 1583360088225
        },
        {
            name: 'isExisting',
            args: [Array],
            timestamp: 1583360088228
        },
        {
            name: 'elements',
            args: [Array],
            timestamp: 1583360088229
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088231
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088232,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088311
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088312,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088320
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088321,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088325
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088326,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088331
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088332,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088336
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088337,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088343
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088344,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088349
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088350,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088354
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088355,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088360
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088361,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088367
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088368,
            result: undefined
        },
        {
            name: 'getWindowCount',
            args: [],
            timestamp: 1583360088374
        },
        {
            name: 'windowHandles',
            args: [],
            timestamp: 1583360088375,
            result: [EventEmitter]
        }
    ],
    isMobile: false,
    isIOS: false,
    isAndroid: false,
    next: [Function],
    finally: [Function],
    call: [Function],
    then: [Function],
    catch: [Function],
    inspect: [Function],
    unify: [Function],
    addCommand: [Function],
    getPrototype: [Function],
    transferPromiseness: [Function],
    depth: 0,
    name: 'getText',
    lastResult: undefined
}